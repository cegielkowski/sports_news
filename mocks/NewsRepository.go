// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "sports_news/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewsRepository is an autogenerated mock type for the NewsRepository type
type NewsRepository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx
func (_m *NewsRepository) Fetch(ctx context.Context) ([]domain.News, error) {
	ret := _m.Called(ctx)

	var r0 []domain.News
	if rf, ok := ret.Get(0).(func(context.Context) []domain.News); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByTeam provides a mock function with given fields: ctx, teamName
func (_m *NewsRepository) FetchByTeam(ctx context.Context, teamName string) ([]domain.News, error) {
	ret := _m.Called(ctx, teamName)

	var r0 []domain.News
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.News); ok {
		r0 = rf(ctx, teamName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, teamName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *NewsRepository) GetByID(ctx context.Context, id string) (domain.News, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.News
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.News); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDAndTeam provides a mock function with given fields: ctx, id, teamName
func (_m *NewsRepository) GetByIDAndTeam(ctx context.Context, id string, teamName string) (domain.News, error) {
	ret := _m.Called(ctx, id, teamName)

	var r0 domain.News
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.News); ok {
		r0 = rf(ctx, id, teamName)
	} else {
		r0 = ret.Get(0).(domain.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, teamName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, news
func (_m *NewsRepository) Upsert(ctx context.Context, news domain.News) error {
	ret := _m.Called(ctx, news)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.News) error); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNewsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewNewsRepository creates a new instance of NewsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNewsRepository(t mockConstructorTestingTNewNewsRepository) *NewsRepository {
	mock := &NewsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
